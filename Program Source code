#include<iostream>
#include<fstream>
#include<cstdlib>

using namespace std; // standard library ,everything below is being prototyped keep in mind that the program runs top to bottom-- int main()


class account_query // we are creating a class here called account_query
{
private:           // private varible only accessible in this class
    char account_number[20];
    char firstName[10];
    char lastName[10];
    float total_Balance;
public:             // other classes can use this function is they call it
    void read_data();
    void show_data();   // the void value is empty, so as of now show_data() has no value, buy simply is acting as a place holder
    void write_rec();
    void read_rec();
    void search_rec();
    void edit_rec();
    void delete_rec();
    void Information();

};
void account_query::read_data()  // so the name account_query is already taken, hence we use recursion ie. :: to use the the name again
{                                   // the benefit from this is that the program reads from top to bottom, hence by reusing the name, we assin it a new value.
    cout<<"\nEnter Account Number: ";
    cin>>account_number;                        // a basic use of cout and cin, the notion is that the user reads the cout and enters a value that cin store, in its given name.
    cout<<"Enter First Name: ";
    cin>>firstName;                 // cin is stored in firstName, which is in the class account_query.
    cout<<"Enter Last Name: ";
    cin>>lastName;
    cout<<"Enter Balance: ";
    cin>>total_Balance;
    cout<<endl;
}
void account_query::show_data()                // recursion yet again, void account_query only uses a cout statment to protray incomation and not take any in
{
    cout<<"Account Number: "<<account_number<<endl;
    cout<<"First Name: "<<firstName<<endl;
    cout<<"Last Name: "<<lastName<<endl;
    cout<<"Current Balance: Rs.  "<<total_Balance<<endl;
    cout<<"-------------------------------"<<endl;
}
void account_query::write_rec()             //
{
    ofstream outfile;
    outfile.open("record.bank", ios::binary|ios::app);
    read_data();
    outfile.write(reinterpret_cast<char *>(this), sizeof(*this));
    outfile.close();
}
void account_query::read_rec()
{
    ifstream infile;
    infile.open("record.bank", ios::binary);
    if(!infile)
    {
        cout<<"Error in Opening! File Not Found!!"<<endl;
        return;
    }
    cout<<"\n****Data from file****"<<endl;
    while(!infile.eof())
    {
        if(infile.read(reinterpret_cast<char*>(this), sizeof(*this))>0)
        {
            show_data();
        }
    }
    infile.close();
}
void account_query::search_rec()
{
    int n;
    ifstream infile;
    infile.open("record.bank", ios::binary);
    if(!infile)
    {
        cout<<"\nError in opening! File Not Found!!"<<endl;
        return;
    }
    infile.seekg(0,ios::end);
    int count = infile.tellg()/sizeof(*this);
    cout<<"\n There are "<<count<<" record in the file";
    cout<<"\n Enter Record Number to Search: ";
    cin>>n;
    infile.seekg((n-1)*sizeof(*this));
    infile.read(reinterpret_cast<char*>(this), sizeof(*this));
    show_data();
}
void account_query::edit_rec()
{
    int n;
    fstream iofile;
    iofile.open("record.bank", ios::in|ios::binary);
    if(!iofile)
    {
        cout<<"\nError in opening! File Not Found!!"<<endl;
        return;
    }
    iofile.seekg(0, ios::end);
    int count = iofile.tellg()/sizeof(*this);
    cout<<"\n There are "<<count<<" record in the file";
    cout<<"\n Enter Record Number to edit: ";
    cin>>n;
    iofile.seekg((n-1)*sizeof(*this));
    iofile.read(reinterpret_cast<char*>(this), sizeof(*this));
    cout<<"Record "<<n<<" has following data"<<endl;
    show_data();
    iofile.close();
    iofile.open("record.bank", ios::out|ios::in|ios::binary);
    iofile.seekp((n-1)*sizeof(*this));
    cout<<"\nEnter data to Modify "<<endl;
    read_data();
    iofile.write(reinterpret_cast<char*>(this), sizeof(*this));
}
void account_query::delete_rec()
{
    int n;
    ifstream infile;
    infile.open("record.bank", ios::binary);
    if(!infile)
    {
        cout<<"\nError in opening! File Not Found!!"<<endl;
        return;
    }
    infile.seekg(0,ios::end);
    int count = infile.tellg()/sizeof(*this);
    cout<<"\n There are "<<count<<" record in the file";
    cout<<"\n Enter Record Number to Delete: ";
    cin>>n;
    fstream tmpfile;
    tmpfile.open("tmpfile.bank", ios::out|ios::binary);
    infile.seekg(0);
    for(int i=0; i<count; i++)
    {
        infile.read(reinterpret_cast<char*>(this),sizeof(*this));
        if(i==(n-1))
            continue;
        tmpfile.write(reinterpret_cast<char*>(this), sizeof(*this));
    }
    infile.close();
    tmpfile.close();
    remove("record.bank");
    rename("tmpfile.bank", "record.bank");
}
int main()                                      // notice the int main () at the end, everything above is prototype.
{
    account_query A;
    int choice;                                 //int choice meaning, the user will enter a intger value for the switch statment
    cout<<" Created by Khalid Ka"<<endl;

    cout<<"***Acount Information System (Banking Database)***"<<endl;  // the Title in the gui ie command promte
    while(true)                                 // while loop with a boolen paremter, yes or no statment
    {                                           // when the program runs these cout statment are displyed
        cout<<"Select one option below ";
        cout<<"\n\t1-->Add record to file";
        cout<<"\n\t2-->Show record from file";
        cout<<"\n\t3-->Search Record from file";
        cout<<"\n\t4-->Update Record";
        cout<<"\n\t5-->Delete Record";

        cout<<"\n\t6-->Quit";

        cout<<"\n\t7-->Information";
        cout<<"\nEnter your choice: ";


        cin>>choice;             // cin >> choice, will save the intger vaule in the choice varible indecated above, this will trigger the switch statments cases.
        switch(choice)                  // a swtich statement, which allows users to make a choice of a integer to enter
        {
        case 1:                         // they type 1 to write a new record
            A.write_rec();
            break;                      // break, meaning to end the switch statment
        case 2:
            A.read_rec();
            break;
        case 3:
            A.search_rec();
            break;
        case 4:
            A.edit_rec();
            break;
        case 5:
            A.delete_rec();
            break;
        case 6:
            exit(0);
            break;

        case 7:
            cout<<"Hello, my name is khalid ka,"<<endl;// information about the program, creating a diffrent function to store the data
            cout<<"The program is a basic database, which uses forloops,while statments,switch statment."<<endl;
            cout<<" Concepts such as Function Overloading,Recursion and prototyping are used"<<endl;
            cout<<"Inside the source code, comments are written, which in detail explain how the program works"<<endl;


            break;
        default:                            //default value is a value which initiates if no other int choices are entered correctly.
            cout<<"\nEnter corret choice";  // The switch statment dosnt for loop, so the program ends.
            exit(0);
        }
    }
    system("pause");
    return 0;           // return 0 if the program runs, not needed but added to disply any error in syntax
}
